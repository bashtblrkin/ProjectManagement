{"version":3,"sources":["ng://alife-file-to-base64/lib/alife-file-to-base64.directive.ts","ng://alife-file-to-base64/lib/alife-file-to-base64.module.ts"],"names":["AlifeFileToBase64Directive","elementRef","this","onFileChanged","EventEmitter","fileModelChange","rawFileModelChange","isTypeFile","userCapture","globalFilesData","globalRawFilesData","prototype","ngOnInit","type","init","console","error","removeFileChangeAction","bindFileChangeAction","onFileReadingCompleted","next","handleFileSelection","event","files","target","fileOutput","i","length","file","opt","name","size","push","that","reader","FileReader","readFile","index","onload","fileData","base64","result","fileReadingCompleted","readAsDataURL","nativeElement","addEventListener","bind","Directive","args","selector","ElementRef","Input","Output","AlifeFileToBase64Module","NgModule","imports","declarations","exports"],"mappings":"sRAAA,IAAAA,EAAA,WAqBE,SAAAA,EAAoBC,GAAAC,KAAAD,WAAAA,EAVVC,KAAAC,cAAmC,IAAIC,EAAAA,aACvCF,KAAAG,gBAAqC,IAAID,EAAAA,aACzCF,KAAAI,mBAAwC,IAAIF,EAAAA,aAEtDF,KAAAK,YAAsB,EACtBL,KAAAM,aAAuB,EAEvBN,KAAAO,gBAAuB,GACvBP,KAAAQ,mBAA0B,GAwG5B,OApGEV,EAAAW,UAAAC,SAAA,WACEV,KAAKK,WAA2B,SAAdL,KAAKW,KACvBX,KAAKY,QAMPd,EAAAW,UAAAG,KAAA,WACE,IAAKZ,KAAKK,WAGR,OAFAQ,QAAQC,MAAM,qEACdd,KAAKe,yBASPf,KAAKgB,wBAMPlB,EAAAW,UAAAQ,uBAAA,WACEjB,KAAKG,gBAAgBe,KAAKlB,KAAKO,iBAC/BP,KAAKI,mBAAmBc,KAAKlB,KAAKQ,oBAClCR,KAAKC,cAAciB,KAAKlB,KAAKO,kBAS/BT,EAAAW,UAAAU,oBAAA,SAAoBC,GAElB,GAAKpB,KAAKK,WAAV,KAIIgB,EAAQD,EAAME,OAAOD,MACzBrB,KAAKQ,mBAAqBa,EAI1B,QAFIE,EAAa,GAERC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,IAAK,KACjCE,EAAOL,EAAMG,GACbG,EAAM,CACRC,KAAMF,EAAKE,KACXC,KAAMH,EAAKG,KACXlB,KAAMe,EAAKf,MAEbY,EAAWO,KAAKH,OAIdI,EAAO/B,KAMPgC,EAAS,IAAIC,YACjB,SAASC,EAASC,GAEhBH,EAAOI,OAAM,SAAcC,OACrBC,EAASD,EAASf,OAAOiB,OAC7BhB,EAAWY,GAAOG,OAASA,EAC3BJ,EAASC,EAAQ,IAGfA,GAASd,EAAMI,OAdrB,SAASe,IACPT,EAAKxB,gBAAkBgB,EACvBQ,EAAKd,yBAaHuB,GAGFR,EAAOS,cAAcpB,EAAMc,IAG7BD,CAAS,KAOXpC,EAAAW,UAAAO,qBAAA,WACEhB,KAAKD,WAAW2C,cAAcC,iBAAiB,SAAU3C,KAAKmB,oBAAoByB,KAAK5C,MAAOA,KAAKM,cAMrGR,EAAAW,UAAAM,uBAAA,WACEf,KAAKD,WAAW2C,cAAcC,iBAAiB,SAAU3C,KAAKmB,oBAAoByB,KAAK5C,MAAOA,KAAKM,kCAtHtGuC,EAAAA,UAASC,KAAA,CAAC,CACTC,SAAU,sEAHsBC,EAAAA,4CAO/BC,EAAAA,yBACAA,EAAAA,4BACAA,EAAAA,6BAEAC,EAAAA,gCACAA,EAAAA,mCACAA,EAAAA,UA8GHpD,EA3HA,GCAAqD,EAAA,WAGA,SAAAA,KAMuC,2BANtCC,EAAAA,SAAQN,KAAA,CAAC,CACRO,QAAS,GAETC,aAAc,CAACxD,GACfyD,QAAS,CAACzD,OAE2BqD,EATvC","sourcesContent":["import { Directive, EventEmitter, ElementRef, Input, Output } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[alife-file-to-base64]'\r\n})\r\nexport class AlifeFileToBase64Directive {\r\n\r\n  @Input() type: string;\r\n  @Input() fileModel: any;\r\n  @Input() rawFileModel: any;\r\n\r\n  @Output() onFileChanged: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() fileModelChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() rawFileModelChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  isTypeFile: boolean = false;\r\n  userCapture: boolean = false;\r\n\r\n  globalFilesData: any = [];\r\n  globalRawFilesData: any = [];\r\n\r\n  constructor(private elementRef: ElementRef) { }\r\n\r\n  ngOnInit() {\r\n    this.isTypeFile = this.type === 'file';\r\n    this.init();\r\n  }\r\n\r\n  /**\r\n   * Initialize the action\r\n   */\r\n  init() {\r\n    if (!this.isTypeFile) {\r\n      console.error(\"alife-file-to-base64 will work only when input type is file.\");\r\n      this.removeFileChangeAction();\r\n      return;\r\n    }\r\n    // // Check for the various File API support.\r\n    // if (window.File && window.FileReader && window.FileList && window.Blob) {\r\n    //   // Great success! All the File APIs are supported.\r\n    // } else {\r\n    //   alert('The File APIs are not fully supported in this browser.');\r\n    // }\r\n    this.bindFileChangeAction();\r\n  }\r\n\r\n  /**\r\n   * Fire the events\r\n   */\r\n  onFileReadingCompleted() {\r\n    this.fileModelChange.next(this.globalFilesData);\r\n    this.rawFileModelChange.next(this.globalRawFilesData);\r\n    this.onFileChanged.next(this.globalFilesData);\r\n  }\r\n\r\n  /**\r\n   * \r\n   * Read the files and prepare the output json with base64.\r\n   * \r\n   * @param event\r\n   */\r\n  handleFileSelection(event) {\r\n\r\n    if (!this.isTypeFile) {\r\n      return;\r\n    }\r\n\r\n    let files = event.target.files;\r\n    this.globalRawFilesData = files;\r\n\r\n    let fileOutput = [];\r\n\r\n    for (let i = 0; i < files.length; i++) {\r\n      let file = files[i];\r\n      let opt = {\r\n        name: file.name,\r\n        size: file.size,\r\n        type: file.type\r\n      }\r\n      fileOutput.push(opt);\r\n    }\r\n\r\n\r\n    var that = this;\r\n    function fileReadingCompleted() {\r\n      that.globalFilesData = fileOutput;\r\n      that.onFileReadingCompleted();\r\n    }\r\n\r\n    var reader = new FileReader();\r\n    function readFile(index) {\r\n\r\n      reader.onload = (function (fileData: any) {\r\n        let base64 = fileData.target.result;\r\n        fileOutput[index].base64 = base64;\r\n        readFile(index + 1);\r\n      });\r\n\r\n      if (index >= files.length) {\r\n        fileReadingCompleted();\r\n        return;\r\n      }\r\n      reader.readAsDataURL(files[index]);\r\n    }\r\n\r\n    readFile(0);\r\n\r\n  }\r\n\r\n  /**\r\n   * Add Event listener action on input \r\n   */\r\n  bindFileChangeAction() {\r\n    this.elementRef.nativeElement.addEventListener('change', this.handleFileSelection.bind(this), this.userCapture);\r\n  }\r\n\r\n  /**\r\n   * Remove Event listener action on input \r\n   */\r\n  removeFileChangeAction() {\r\n    this.elementRef.nativeElement.addEventListener('change', this.handleFileSelection.bind(this), this.userCapture);\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { AlifeFileToBase64Directive } from './alife-file-to-base64.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n  ],\r\n  declarations: [AlifeFileToBase64Directive],\r\n  exports: [AlifeFileToBase64Directive]\r\n})\r\nexport class AlifeFileToBase64Module { }\r\n"]}