import { Directive, EventEmitter, ElementRef, Input, Output, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AlifeFileToBase64Directive = /** @class */ (function () {
    function AlifeFileToBase64Directive(elementRef) {
        this.elementRef = elementRef;
        this.onFileChanged = new EventEmitter();
        this.fileModelChange = new EventEmitter();
        this.rawFileModelChange = new EventEmitter();
        this.isTypeFile = false;
        this.userCapture = false;
        this.globalFilesData = [];
        this.globalRawFilesData = [];
    }
    /**
     * @return {?}
     */
    AlifeFileToBase64Directive.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.isTypeFile = this.type === 'file';
        this.init();
    };
    /**
     * Initialize the action
     */
    /**
     * Initialize the action
     * @return {?}
     */
    AlifeFileToBase64Directive.prototype.init = /**
     * Initialize the action
     * @return {?}
     */
    function () {
        if (!this.isTypeFile) {
            console.error("alife-file-to-base64 will work only when input type is file.");
            this.removeFileChangeAction();
            return;
        }
        // // Check for the various File API support.
        // if (window.File && window.FileReader && window.FileList && window.Blob) {
        //   // Great success! All the File APIs are supported.
        // } else {
        //   alert('The File APIs are not fully supported in this browser.');
        // }
        this.bindFileChangeAction();
    };
    /**
     * Fire the events
     */
    /**
     * Fire the events
     * @return {?}
     */
    AlifeFileToBase64Directive.prototype.onFileReadingCompleted = /**
     * Fire the events
     * @return {?}
     */
    function () {
        this.fileModelChange.next(this.globalFilesData);
        this.rawFileModelChange.next(this.globalRawFilesData);
        this.onFileChanged.next(this.globalFilesData);
    };
    /**
     *
     * Read the files and prepare the output json with base64.
     *
     * @param event
     */
    /**
     *
     * Read the files and prepare the output json with base64.
     *
     * @param {?} event
     * @return {?}
     */
    AlifeFileToBase64Directive.prototype.handleFileSelection = /**
     *
     * Read the files and prepare the output json with base64.
     *
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.isTypeFile) {
            return;
        }
        /** @type {?} */
        var files = event.target.files;
        this.globalRawFilesData = files;
        /** @type {?} */
        var fileOutput = [];
        for (var i = 0; i < files.length; i++) {
            /** @type {?} */
            var file = files[i];
            /** @type {?} */
            var opt = {
                name: file.name,
                size: file.size,
                type: file.type
            };
            fileOutput.push(opt);
        }
        /** @type {?} */
        var that = this;
        /**
         * @return {?}
         */
        function fileReadingCompleted() {
            that.globalFilesData = fileOutput;
            that.onFileReadingCompleted();
        }
        /** @type {?} */
        var reader = new FileReader();
        /**
         * @param {?} index
         * @return {?}
         */
        function readFile(index) {
            reader.onload = (function (fileData) {
                /** @type {?} */
                var base64 = fileData.target.result;
                fileOutput[index].base64 = base64;
                readFile(index + 1);
            });
            if (index >= files.length) {
                fileReadingCompleted();
                return;
            }
            reader.readAsDataURL(files[index]);
        }
        readFile(0);
    };
    /**
     * Add Event listener action on input
     */
    /**
     * Add Event listener action on input
     * @return {?}
     */
    AlifeFileToBase64Directive.prototype.bindFileChangeAction = /**
     * Add Event listener action on input
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.addEventListener('change', this.handleFileSelection.bind(this), this.userCapture);
    };
    /**
     * Remove Event listener action on input
     */
    /**
     * Remove Event listener action on input
     * @return {?}
     */
    AlifeFileToBase64Directive.prototype.removeFileChangeAction = /**
     * Remove Event listener action on input
     * @return {?}
     */
    function () {
        this.elementRef.nativeElement.addEventListener('change', this.handleFileSelection.bind(this), this.userCapture);
    };
    AlifeFileToBase64Directive.decorators = [
        { type: Directive, args: [{
                    selector: '[alife-file-to-base64]'
                },] }
    ];
    /** @nocollapse */
    AlifeFileToBase64Directive.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    AlifeFileToBase64Directive.propDecorators = {
        type: [{ type: Input }],
        fileModel: [{ type: Input }],
        rawFileModel: [{ type: Input }],
        onFileChanged: [{ type: Output }],
        fileModelChange: [{ type: Output }],
        rawFileModelChange: [{ type: Output }]
    };
    return AlifeFileToBase64Directive;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AlifeFileToBase64Module = /** @class */ (function () {
    function AlifeFileToBase64Module() {
    }
    AlifeFileToBase64Module.decorators = [
        { type: NgModule, args: [{
                    imports: [],
                    declarations: [AlifeFileToBase64Directive],
                    exports: [AlifeFileToBase64Directive]
                },] }
    ];
    return AlifeFileToBase64Module;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AlifeFileToBase64Module, AlifeFileToBase64Directive as Éµa };

//# sourceMappingURL=alife-file-to-base64.js.map