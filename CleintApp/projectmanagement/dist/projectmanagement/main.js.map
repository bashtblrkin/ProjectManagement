{"version":3,"sources":["./src/app/shared/components/main-layout/main-layout.component.ts","./src/app/shared/components/main-layout/main-layout.component.html","./src/app/shared/services/datasearch.service.ts","./src/app/optimization-page/optimization-page.component.ts","./src/app/optimization-page/optimization-page.component.html","./src/app/shared/services/gant.task.service.ts","./src/environments/environment.ts","./src/app/home-page/home-page.component.ts","./src/app/home-page/home-page.component.html","./src/app/shared/pipes/searchTasks.pipe.ts","./src/app/shared/services/auth.service.ts","./src/app/shared/validators/confirmed.validators.ts","./src/app/tasks-page/tasks-page.component.ts","./src/app/tasks-page/tasks-page.component.html","./src/app/gant-projects/gant-projects.component.ts","./src/app/gant-projects/gant-projects.component.html","./src/app/create-project-page/create-project-page.component.ts","./src/app/create-project-page/create-project-page.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/shared/services/dataupdate.service.ts","./src/app/shared/pipes/searchProjectTasks.pipe.ts","./src/app/shared/pipes/searchProjects.pipe.ts","./src/app/app.module.ts","./src/app/gant-chart/gant-chart.component.ts","./src/app/gant-chart/gant-chart.component.html","./src/app/app-injection-tokens.ts","./src/app/guard/auth.guard.ts","./src/app/shared/services/task.service.ts","./src/app/shared/services/optimization.service.ts","./src/app/project-page/project-page.component.ts","./src/app/project-page/project-page.component.html","./src/app/shared/services/user.service.ts","./src/app/projects-page/projects-page.component.ts","./src/app/projects-page/projects-page.component.html","./src/app/update-account-page/update-account-page.component.ts","./src/app/update-account-page/update-account-page.component.html","./src/app/shared/components/user-layout/user-layout.component.ts","./src/app/shared/components/user-layout/user-layout.component.html","./src/app/account-page/account-page.component.ts","./src/app/account-page/account-page.component.html","./src/app/task-page/task-page.component.ts","./src/app/task-page/task-page.component.html","./src/app/app-routing.module.ts","./src/app/create-task-page/create-task-page.component.ts","./src/app/create-task-page/create-task-page.component.html","./src/app/shared/services/project.service.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormControl, FormGroup, Validators} from '@angular/forms';\n\nimport {Account} from '../../interfaces/interfaces';\nimport {AuthService} from '../../services/auth.service';\nimport {ConfirmedValidators} from '../../validators/confirmed.validators';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-main-layout',\n  templateUrl: './main-layout.component.html',\n  styleUrls: ['./main-layout.component.scss']\n})\nexport class MainLayoutComponent implements OnInit {\n\n  formRegistration: FormGroup\n  formLogin: FormGroup\n  openRegistrationModal: boolean = false\n  submitted: boolean = false\n  openSignInModal: boolean = false\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n    ) {\n  }\n\n  ngOnInit(): void {\n    this.formRegistration = this.formBuilder.group({\n      email: ['', [\n        Validators.required,\n        Validators.email\n      ]],\n      password: ['', [\n        Validators.required,\n        Validators.minLength(6)\n      ]],\n      passwordConfirm: ['', [\n        Validators.required,\n        Validators.minLength(6)\n      ]],\n      fio: ['', [\n        Validators.required\n      ]]\n    }, {\n      validator: ConfirmedValidators.MustMatch('password', 'passwordConfirm')\n    })\n    this.formLogin = new FormGroup({\n      email: new FormControl('', [\n        Validators.required,\n        Validators.email\n      ]),\n      password: new FormControl('', [\n        Validators.required,\n        Validators.minLength(6)\n      ])\n    })\n  }\n\n  submit() {\n    this.submitted = true\n\n    if (this.formRegistration.invalid)\n    {\n      return\n    }\n\n    const account: Account = {\n      email: this.formRegistration.value.email,\n      password: this.formRegistration.value.password,\n      fio: this.formRegistration.value.fio\n    }\n\n    this.authService.register(account)\n      .subscribe(response => {\n        this.formRegistration.reset()\n        this.submitted = false\n        console.log(response)\n      }, error => {\n        if (error.error === \"Email exists\")\n        {\n          this.formRegistration.get('email').setErrors({\n            uniqEmail: true\n          })\n          this.submitted = false\n        }\n      })\n  }\n\n  submitLogin() {\n    this.submitted = true\n\n    if (this.formLogin.invalid)\n    {\n      return\n    }\n\n    this.authService.login(this.formLogin.value.email, this.formLogin.value.password)\n      .subscribe( res => {\n        this.submitted = false\n        this.router.navigate(['user', 'projects'])\n      }, error => {\n        if (error.error === \"Email not found\") {\n          this.formLogin.get('email').setErrors({\n            uniqEmail: true\n          })\n        }\n        if (error.status === 401) {\n          this.formLogin.get('password').setErrors({\n            incorrectPas: true\n          })\n          console.log(error.status)\n        }\n        this.submitted = false\n      })\n  }\n}\n","<div class=\"header\">\n  <div class=\"header_text\">Управление проектами</div>\n  <div class=\"header-buttons\">\n    <button class=\"header-button\" (click)=\"openRegistrationModal = true\">Регистрация</button>\n    <button class=\"header-button\" (click)=\"openSignInModal = true\">Войти</button>\n  </div>\n</div>\n\n<div class=\"mycontainer\">\n  <router-outlet></router-outlet>\n</div>\n\n<div class=\"modal\" [ngClass]=\"{open: openRegistrationModal}\" (mousedown)=\"openRegistrationModal = false\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\" (mousedown)=\"$event.stopPropagation()\">\n      <div class=\"modal-header\">\n        <h3>Регистрация</h3>\n        <a title=\"Close\" class=\"close\" (click)=\"openRegistrationModal = false\">×</a>\n      </div>\n      <div class=\"modal-body\">\n        <form [formGroup]=\"formRegistration\" (ngSubmit)=\"submit()\">\n          <div class=\"form-control\"\n               [ngClass]=\"{invalid: formRegistration.get('email').touched && formRegistration.get('email').invalid}\"\n          >\n            <label for=\"email\" class=\"modal-body_label\">Введите email:</label>\n            <input type=\"text\" id=\"email\" class=\"modal-body_input\" formControlName=\"email\">\n            <div\n              class=\"validation\"\n              *ngIf=\"formRegistration.get('email').touched && formRegistration.get('email').invalid\"\n            >\n              <small\n                *ngIf=\"formRegistration.get('email').errors.required\"\n              >Поле не может быть пустым</small>\n              <small\n                *ngIf=\"formRegistration.get('email').errors.email\"\n              >Введён некорректный email</small>\n              <small\n                *ngIf=\"formRegistration.get('email').errors.uniqEmail\"\n              >Данный email существует</small>\n            </div>\n          </div>\n\n          <div class=\"form-control\"\n               [ngClass]=\"{invalid: formRegistration.get('password').touched && formRegistration.get('password').invalid}\"\n          >\n            <label for=\"password\" class=\"modal-body_label\">Введите пароль:</label>\n            <input type=\"password\" id=\"password\" class=\"modal-body_input\" formControlName=\"password\">\n            <div\n              class=\"validation\"\n              *ngIf=\"formRegistration.get('password').touched && formRegistration.get('password').invalid\"\n            >\n              <small\n                *ngIf=\"formRegistration.get('password').errors.required\"\n              >Поле не может быть пустым</small>\n              <small\n                *ngIf=\"formRegistration.get('password').errors.minlength\"\n              >Пароль должен содержать минимум 6 символов</small>\n            </div>\n          </div>\n\n          <div class=\"form-control\"\n               [ngClass]=\"{invalid: formRegistration.get('passwordConfirm').touched && formRegistration.get('passwordConfirm').invalid}\"\n          >\n            <label for=\"passwordTrue\" class=\"modal-body_label\">Повторите пароль:</label>\n            <input type=\"password\" id=\"passwordTrue\" class=\"modal-body_input\" formControlName=\"passwordConfirm\">\n            <div\n              class=\"validation\"\n              *ngIf=\"formRegistration.get('passwordConfirm').touched && formRegistration.get('passwordConfirm').invalid\"\n            >\n              <small\n                *ngIf=\"formRegistration.get('passwordConfirm').errors.required\"\n              >Поле не может быть пустым</small>\n              <small\n                *ngIf=\"formRegistration.get('passwordConfirm').errors.mustMatch\"\n              >Пароли не совпадают</small>\n              <small\n                *ngIf=\"formRegistration.get('passwordConfirm').errors.minlength\"\n              >Пароль должен содержать минимум 6 символов</small>\n            </div>\n\n          </div>\n\n          <div class=\"form-control\"\n               [ngClass]=\"{invalid: formRegistration.get('fio').touched && formRegistration.get('fio').invalid}\"\n          >\n            <label for=\"fio\" class=\"modal-body_label\">Введите ФИО:</label>\n            <input type=\"text\" id=\"fio\" class=\"modal-body_input\" formControlName=\"fio\">\n            <div\n              class=\"validation\"\n              *ngIf=\"formRegistration.get('fio').touched && formRegistration.get('fio').invalid\"\n            >\n              <small\n                *ngIf=\"formRegistration.get('fio').errors.required\"\n              >Поле не может быть пустым</small>\n            </div>\n          </div>\n\n\n          <div class=\"modal-body_wrap\">\n            <button\n              type=\"submit\"\n              class=\"modal-body_button\"\n              [ngClass]=\"{invalid: formRegistration.invalid || submitted}\"\n              [disabled]=\"formRegistration.invalid || submitted\"\n            >Отправить\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class=\"modal\"  [ngClass]=\"{open: openSignInModal}\" (mousedown)=\"openSignInModal = false\">\n  <div class=\"modal-dialog\">\n    <div class=\"modal-content\" (mousedown)=\"$event.stopPropagation()\">\n      <div class=\"modal-header\">\n        <h3>Вход</h3>\n        <a title=\"Close\" class=\"close\" (click)=\"openSignInModal = false\">×</a>\n      </div>\n      <div class=\"modal-body\">\n        <form [formGroup]=\"formLogin\" (ngSubmit)=\"submitLogin()\">\n\n          <div class=\"form-control\"\n               [ngClass]=\"{invalid: formLogin.get('email').touched && formLogin.get('email').invalid}\"\n          >\n            <label for=\"emailLogin\" class=\"modal-body_label\">Введите email:</label>\n            <input type=\"text\" id=\"emailLogin\" class=\"modal-body_input\" formControlName=\"email\">\n            <div\n              class=\"validation\"\n              *ngIf=\"formLogin.get('email').touched && formLogin.get('email').invalid\"\n            >\n              <small\n                *ngIf=\"formLogin.get('email').errors.required\"\n              >Поле не может быть пустым</small>\n              <small\n                *ngIf=\"formLogin.get('email').errors.email\"\n              >Введён некорректный email</small>\n              <small\n                *ngIf=\"formLogin.get('email').errors.uniqEmail\"\n              >Данный email не существует</small>\n            </div>\n          </div>\n\n\n          <div class=\"form-control\"\n               [ngClass]=\"{invalid: formLogin.get('password').touched && formLogin.get('password').invalid}\"\n          >\n            <label for=\"passwordLogin\" class=\"modal-body_label\">Введите пароль:</label>\n            <input type=\"password\" id=\"passwordLogin\" class=\"modal-body_input\" formControlName=\"password\">\n            <div\n              class=\"validation\"\n              *ngIf=\"formLogin.get('password').touched && formLogin.get('password').invalid\"\n            >\n              <small\n                *ngIf=\"formLogin.get('password').errors.required\"\n              >Поле не может быть пустым</small>\n              <small\n                *ngIf=\"formLogin.get('password').errors.minlength\"\n              >Пароль должен содержать минимум 6 символов</small>\n              <small\n                *ngIf=\"formLogin.get('password').errors.incorrectPas\"\n              >Введён некорректный пароль</small>\n            </div>\n          </div>\n\n\n          <div class=\"modal-body_wrap\">\n            <button\n              type=\"submit\"\n              class=\"modal-body_button\"\n              [ngClass]=\"{invalid: formLogin.invalid || submitted}\"\n              [disabled]=\"formLogin.invalid || submitted\"\n            >Войти\n            </button>\n          </div>\n\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n","import {Injectable} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class DatasearchService {\r\n  searchStr = new Subject<string>()\r\n  updateUserLayout = new Subject()\r\n}\r\n","import {Component, ElementRef, OnInit} from '@angular/core';\nimport {AbstractControl, Form, FormArray, FormControl, FormGroup, Validators} from '@angular/forms';\nimport {OptimizationCombinedObjectiveFunction} from '../shared/interfaces/interfaces';\nimport {OptimizationService} from '../shared/services/optimization.service';\n\n@Component({\n  selector: 'app-optimization-page',\n  templateUrl: './optimization-page.component.html',\n  styleUrls: ['./optimization-page.component.scss']\n})\nexport class OptimizationPageComponent implements OnInit {\n\n  rows: number = 2\n  columns: number = 2\n  countColumns: number[] = []\n  form: FormGroup\n  answerArrayName: any\n  answerArrayNumber: any = []\n  submitted: boolean = false\n  answergetted: boolean = false\n  error: boolean = false\n  secondError: boolean = false\n\n  constructor(\n    private optimizationService: OptimizationService\n  ) { }\n\n\n  ngOnInit(): void {\n    this.form = new FormGroup({\n      matrix: new FormArray([]),\n      priority: new FormArray([]),\n      direction: new FormArray([])\n    })\n    this.updateMatrix()\n  }\n\n  updateMatrix() {\n    this.countColumns = []\n    if (this.columns < 2)\n    {\n      this.columns = 2\n    }\n    if (this.columns > 5)\n    {\n      this.columns = 5\n    }\n    if (this.rows < 2)\n    {\n      this.rows = 2\n    }\n    for (let i =0; i < this.columns; i++)\n    {\n      this.countColumns.push(i)\n    }\n\n    (this.form.controls['matrix'] as FormArray).clear();\n    (this.form.controls['direction'] as FormArray).clear();\n    (this.form.controls['priority'] as FormArray).clear()\n    for (let i = 0; i < this.rows; i++) {\n      (this.form.controls['matrix'] as FormArray).push(new FormArray([]))\n      for (let j = 0; j < this.columns; j++) {\n        ((this.form.controls['matrix'] as FormArray).at(i) as FormArray).push(new FormControl('', [Validators.required]))\n      }\n    }\n    for (let i = 0; i < this.columns; i++)\n    {\n      (this.form.controls['priority'] as FormArray).push(new FormControl('', [Validators.required]));\n      (this.form.controls['direction'] as FormArray).push(new FormControl('1', [Validators.required]))\n    }\n  }\n\n\n  getMatrixControls(form: FormGroup) {\n    return (this.form.get('matrix') as FormArray).controls as any\n  }\n\n  getPriorityControls(form: FormGroup) {\n    return (this.form.get('priority') as FormArray).controls as any\n  }\n\n  getDirectionControls(form: FormGroup) {\n    return (this.form.get('direction') as FormArray).controls as any\n  }\n\n  getAnswer() {\n    if (this.form.invalid)\n    {\n      return\n    }\n    this.submitted = true\n    this.error = false\n    this.secondError = false\n    this.answergetted = false\n    const optimizationTask: OptimizationCombinedObjectiveFunction = {\n      width: this.columns,\n      height: this.rows,\n      Data: this.form.controls['matrix'].value,\n      Weight: this.form.controls['priority'].value,\n      Direction: this.form.controls['direction'].value\n    }\n    this.optimizationService.GetAnswerCombinedObjectiveFunction(optimizationTask).subscribe(res => {\n\n      let answerObj: any = {}\n      for (let i =0; i < this.rows; i++)\n      {\n        answerObj[(document.getElementById(`answer.${i}`) as HTMLInputElement).value] = res.answerArr[i]\n      }\n      console.log(answerObj)\n\n      if (res.dir === 'min')\n      {\n        this.answerArrayName = Object.keys(answerObj).sort((a, b) => answerObj[a] - answerObj[b])\n      }\n      if (res.dir === 'max')\n      {\n        this.answerArrayName = Object.keys(answerObj).sort((a, b) => answerObj[b] - answerObj[a])\n      }\n\n      for (let i = 0; i < this.rows; i++)\n      {\n        this.answerArrayNumber[i] = answerObj[this.answerArrayName[i]]\n      }\n      console.log(this.answerArrayNumber)\n\n\n      let min = this.answerArrayNumber[0]\n      for (let i = 1; i < this.rows; i++)\n      {\n        if (this.answerArrayNumber[i] < min)\n        {\n          min = this.answerArrayNumber[i]\n        }\n      }\n      min = Math.abs(min)\n      console.log(min)\n      for (let i = 0; i < this.rows; i++)\n      {\n        this.answerArrayNumber[i] = ((this.answerArrayNumber[i]+min)*100)+1\n      }\n\n      let max = this.answerArrayNumber[0]\n      for (let i = 1; i < this.rows; i++)\n      {\n        if (this.answerArrayNumber[i] > max)\n        {\n          max = this.answerArrayNumber[i]\n        }\n      }\n      min = this.answerArrayNumber[0]\n      for (let i = 1; i < this.rows; i++)\n      {\n        if (this.answerArrayNumber[i] < min)\n        {\n          min = this.answerArrayNumber[i]\n        }\n      }\n      const delta = 100/max\n      console.log(delta)\n      if (res.dir === 'min')\n      {\n        for (let i = 0; i < this.rows; i++)\n        {\n          if (this.answerArrayNumber[i] == min) {\n            this.answerArrayNumber[i] = 100\n          } else if (this.answerArrayNumber[i] == max) {\n            this.answerArrayNumber[i] = 0\n          } else {\n            this.answerArrayNumber[i] = Math.trunc(100 - this.answerArrayNumber[i]*delta)\n\n          }\n        }\n      }\n\n      if (res.dir === 'max')\n      {\n        for (let i = 0; i < this.rows; i++)\n        {\n          if (this.answerArrayNumber[i] == max) {\n            this.answerArrayNumber[i] = 100\n          } else if (this.answerArrayNumber[i] == min) {\n            this.answerArrayNumber[i] = 0\n          } else {\n            this.answerArrayNumber[i] = Math.trunc(this.answerArrayNumber[i]*delta)\n\n          }\n        }\n      }\n\n      this.submitted = false\n      this.answergetted = true\n    }, error => {\n      if (error.error === \"Invalid values\")\n      {\n        this.error = true\n      } else {\n        this.secondError = true\n      }\n      this.submitted = false\n    })\n  }\n\n\n}\n","<div class=\"mycontainer\">\n  <div class=\"wrap\">\n      <div class=\"question\">\n        <div class=\"options\">\n          <div class=\"options-wrap\">\n            <label for=\"alternative\" >Введите количество альтернативных решений (строки):</label>\n            <input type=\"text\" id=\"alternative\" [(ngModel)]=\"rows\" (ngModelChange)=\"updateMatrix()\">\n          </div>\n          <div class=\"options-wrap\">\n            <label for=\"criteria\">Введите количество критериев оптимизации (столбцы):</label>\n            <input type=\"text\" id=\"criteria\" [(ngModel)]=\"columns\" (ngModelChange)=\"updateMatrix()\">\n          </div>\n        </div>\n        <div class=\"matrix\">\n          <form [formGroup]=\"form\" (ngSubmit)=\"getAnswer()\" class=\"form\">\n            <div class=\"matrix-criteria-wrap\">\n              <input type=\"text\"\n                     *ngFor=\"let item of countColumns; let i = index\"\n                     class=\"matrix-criteria\"\n                     placeholder=\"Введите критерий\">\n            </div>\n            <div *ngFor=\"let row of getMatrixControls(form);let i=index\">\n              <input type=\"text\"\n                     class=\"matrix-rows\"\n                     id = \"answer.{{i}}\"\n                     placeholder=\"Название решения\"\n              >\n              <input\n                *ngFor=\"let col of row['controls']\"\n                [formControl]=\"col\"\n                class=\"matrix-data\"\n              >\n            </div>\n            <div class=\"matrix-criteria-wrap\">\n              <input type=\"text\"\n                     *ngFor=\"let priority of getPriorityControls(form)\"\n                     class=\"matrix-priority\"\n                     [formControl]=\"priority\"\n                     placeholder=\"Введите важность\">\n            </div>\n            <div class=\"matrix-criteria-wrap\">\n              <select\n                *ngFor=\"let direction of getDirectionControls(form)\"\n                class=\"matrix-direction\"\n                [formControl]=\"direction\">\n                <option value=\"1\">Max</option>\n                <option value=\"0\">Min</option>\n              </select>\n            </div>\n            <button\n              type=\"submit\"\n              class=\"form-button\"\n              [ngClass]=\"{invalid: form.invalid || submitted}\"\n              [disabled]=\"form.invalid || submitted\"\n            >Получить решение\n            </button>\n            <div *ngIf=\"form.invalid\" class=\"invalid-text\">Все поля формы должны быть заполнены</div>\n            <div *ngIf=\"error\">Введенны некорректные значения (максимальное и минимальное значения в столбцах не должно совпадать)</div>\n            <div *ngIf=\"secondError\">Введенны некорректные значения (значения матрицы и приоритетов могуть быть только числами)</div>\n          </form>\n        </div>\n      </div>\n      <div class=\"answer\" *ngIf=\"answergetted\">\n        <h2>Рейтинг:</h2>\n        <div class=\"table-responsive\">\n          <table class=\"table table-bordered\">\n            <thead>\n              <tr>\n                <th>Номер</th>\n                <th>Название решения</th>\n                <th>Эффективность решения</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              <tr *ngFor=\"let answer of answerArrayName; let idx = index\">\n                <td>{{idx+1}}</td>\n                <td>{{answer}}</td>\n                <td>{{answerArrayNumber[idx]}}%</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n  </div>\n</div>\n","import {Inject, Injectable} from '@angular/core';\r\nimport {TaskGantt} from '../interfaces/interfaces';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {RESOURCE_API_URL} from '../../app-injection-tokens';\r\nimport {map} from 'rxjs/operators';\r\n\r\n\r\n@Injectable()\r\nexport class GantTaskService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject(RESOURCE_API_URL) private apiUrl: string\r\n  ) {\r\n  }\r\n\r\n  get(id: string): Promise<TaskGantt[]>{\r\n    return this.http.get<TaskGantt[]>(`${this.apiUrl}api/tasks/project/gant`, {\r\n      params: new HttpParams().set('id', id)\r\n    })\r\n      .toPromise()\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  authApi: 'http://localhost:5000/',\n  projectManagementApi: 'http://localhost:56299/',\n  tokenWhiteListedDomains: ['localhost:56299']\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home-page',\n  templateUrl: './home-page.component.html',\n  styleUrls: ['./home-page.component.scss']\n})\nexport class HomePageComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<div class=\"wrap\">\n  <div>\n    <h1>Сервис для автоматизации процесса управления проектами</h1>\n  </div>\n  <div>\n    <div class=\"card-row\">\n      <div class=\"card\">\n        <div>\n          <h2>Повышайте продуктивность работы команды</h2>\n          <div class=\"card-text\">Использование сервиса для управления проектами поможет вашим сотрудникам повышать продуктивность и поддерживать взаимодействие с коллегами.</div>\n        </div>\n        <img src=\"./assets/img/command%20work.jpg\" alt=\"\" class=\"card-img\">\n      </div>\n      <div class=\"card\">\n        <div>\n          <h2>Улучшайте взаимодействие внутри команды</h2>\n          <div class=\"card-text\">Предоставьте командам возможность организации совместной работы между отделами и эффективную автоматизацию процессов.</div>\n        </div>\n        <img src=\"./assets/img/relationships%20command.jpg\" alt=\"\" class=\"card-img\">\n      </div>\n    </div>\n    <div class=\"card-row\">\n      <div class=\"card\">\n        <div>\n          <h2>Работайте со всеми отделами вашей организации в режиме реального времени</h2>\n          <div class=\"card-text\">Самое главное – информацией можно поделиться со всеми участниками в любое время.</div>\n        </div>\n        <img src=\"./assets/img/data%20transfer.png\" alt=\"\" class=\"card-img\">\n      </div>\n      <div class=\"card\">\n        <div>\n          <h2>Достигайте высоких результатов</h2>\n          <div class=\"card-text\">Повышайте продуктивность и эффективность работы команды на всех уровнях по всем задачам и проектам.</div>\n        </div>\n        <img src=\"./assets/img/high%20result.jpg\" alt=\"\" class=\"card-img\">\n      </div>\n    </div>\n  </div>\n</div>\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {Task} from '../interfaces/interfaces';\r\n\r\n@Pipe({\r\n  name: 'searchTasks'\r\n})\r\nexport class SearchTasksPipe implements PipeTransform {\r\n  transform(tasks: Task[], search: string = ''): Task[] {\r\n    if(!search.trim())\r\n    {\r\n      return tasks\r\n    }\r\n\r\n    return tasks.filter(tasks => {\r\n      return tasks.name.toLowerCase().includes(search.toLowerCase())\r\n    })\r\n  }\r\n\r\n}\r\n","import {Inject, Injectable} from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse, HttpHeaders} from '@angular/common/http';\r\nimport {Account, Token} from '../interfaces/interfaces';\r\nimport {Observable, throwError} from 'rxjs';\r\nimport {environment} from '../../../environments/environment';\r\nimport {catchError, delay, tap} from 'rxjs/operators';\r\nimport {AUTH_API_URL} from '../../app-injection-tokens';\r\nimport {JwtHelperService} from '@auth0/angular-jwt';\r\nimport {Router} from '@angular/router';\r\n\r\nexport const ACCESS_TOKEN_KEY = 'projectmanagement_access_token'\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class AuthService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject(AUTH_API_URL) private apiUrl: string,\r\n    private jwtHelper: JwtHelperService,\r\n    private router: Router\r\n  ) {}\r\n\r\n  register(account: Account): Observable<any> {\r\n    return this.http.post(`${environment.authApi}api/auth/create`, account)\r\n      .pipe(\r\n        catchError((error: HttpErrorResponse) => throwError(error))\r\n      )\r\n  }\r\n\r\n  login(email: string, password: string): Observable<Token> {\r\n      return this.http.post<Token>(`${this.apiUrl}api/auth/login`, {\r\n        email, password\r\n      }).pipe(\r\n        tap(token => {\r\n          localStorage.setItem(ACCESS_TOKEN_KEY, token.access_token)\r\n        })\r\n      )\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n      var token = localStorage.getItem(ACCESS_TOKEN_KEY)\r\n      return token && !this.jwtHelper.isTokenExpired(token)\r\n  }\r\n\r\n  logout() {\r\n      localStorage.removeItem(ACCESS_TOKEN_KEY)\r\n      this.router.navigate([''])\r\n  }\r\n}\r\n","import {FormControl, FormGroup} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {AuthService} from '../services/auth.service';\n\n\n\nexport class ConfirmedValidators {\n\n  constructor() {\n  }\n\n  static MustMatch(controlName: string, matchingControlName: string) {\n    return (formGroup: FormGroup) => {\n      const control = formGroup.controls[controlName];\n      const matchingControl = formGroup.controls[matchingControlName];\n\n      if (matchingControl.errors && !matchingControl.errors.mustMatch) {\n        return;\n      }\n\n      if (control.value !== matchingControl.value) {\n        matchingControl.setErrors({ mustMatch: true });\n      } else {\n        matchingControl.setErrors(null);\n      }\n    }\n  }\n\n}\n\n","import { Component, OnInit } from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {TaskUser} from '../shared/interfaces/interfaces';\nimport {TaskService} from '../shared/services/task.service';\nimport {DatasearchService} from '../shared/services/datasearch.service';\n\n@Component({\n  selector: 'app-tasks-page',\n  templateUrl: './tasks-page.component.html',\n  styleUrls: ['./tasks-page.component.scss']\n})\nexport class TasksPageComponent implements OnInit {\n\n  tasks$: Observable<TaskUser[]>\n  searchStr: string = ''\n\n  constructor(\n    private taskService: TaskService,\n    private dataSearchService: DatasearchService\n  ) { }\n\n  ngOnInit(): void {\n    this.tasks$ = this.taskService.getTasksByUser()\n    this.dataSearchService.searchStr.subscribe(str => {\n      this.searchStr = str\n    })\n  }\n\n}\n","<div class=\"mycontainer\">\n  <div class=\"wrap\">\n    <h2>Мои задачи</h2>\n\n    <div *ngIf=\"tasks$ | async as tasks\">\n      <div class=\"project\" *ngFor=\"let task of tasks | SearchProjectTasks:searchStr | groupBy:'project' | pairs \">\n        <mat-expansion-panel class=\"accord\" [expanded]=\"true\">\n\n            <mat-expansion-panel-header>\n              <mat-panel-title>\n                <div class=\"project-title\">{{task[0]}}</div>\n              </mat-panel-title>\n\n            </mat-expansion-panel-header>\n\n\n            <div class=\"table-responsive\">\n              <table class=\"table table-bordered\">\n                <thead>\n                <tr>\n                  <th>Название</th>\n                  <th>Начало работы</th>\n                  <th>Конец работы</th>\n                  <th>Статус</th>\n                </tr>\n                </thead>\n\n                <tbody>\n                <tr *ngFor=\"let currenttask of task[1]\">\n                  <td\n                    [ngClass]=\"{\n                      important: currenttask.priority === 'Важно',\n                      'never-mind': currenttask.priority === 'Неважно'\n                      }\"\n                    class=\"task-name\"\n                    [routerLink]=\"['/user', 'task', currenttask.taskId]\"\n                  >{{currenttask.name}}</td>\n                  <td>{{currenttask.start_date | date:'d MMM , y, HH:mm:ss':null:'ru'}}</td>\n                  <td>{{currenttask.end_date | date:'d MMM , y, HH:mm:ss':null:'ru'}}</td>\n                  <td\n                    [ngClass]=\"{\n                      pending: currenttask.status === 'В ожидании',\n                      process: currenttask.status === 'В процессе',\n                      done: currenttask.status === 'Готово'\n                      }\"\n                  >{{currenttask.status}}</td>\n                </tr>\n                </tbody>\n              </table>\n            </div>\n\n\n        </mat-expansion-panel>\n      </div>\n\n    </div>\n\n\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {Observable} from 'rxjs';\nimport {minProject} from '../shared/interfaces/interfaces';\nimport {ProjectService} from '../shared/services/project.service';\nimport {DatasearchService} from '../shared/services/datasearch.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-gant-projects',\n  templateUrl: './gant-projects.component.html',\n  styleUrls: ['./gant-projects.component.scss']\n})\nexport class GantProjectsComponent implements OnInit {\n\n  minProject$: Observable<minProject[]>\n  searchStr: string = ''\n\n  constructor(\n    private projectService: ProjectService,\n    private dataSearchService: DatasearchService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.minProject$ = this.projectService.getProjects()\n    this.dataSearchService.searchStr.subscribe(str => {\n      this.searchStr = str\n    })\n  }\n\n\n}\n","<div *ngIf=\"minProject$ | async as projects; else loading\" class=\"mycontainer\">\n\n  <div *ngFor=\"let project of projects | searchProjects:searchStr\" class=\"card\" routerLink=\"{{project.id}}\">\n\n    <h2>{{project.title}}</h2>\n    <p class=\"card-text\">{{project.description}}</p>\n    <div class=\"wrap\">\n      <div\n        class=\"card-role\"\n        [ngClass]=\"{\n              manager: project.role === 'Менеджер',\n              director: project.role === 'Директор',\n              user: project.role === 'Пользователь'\n          }\"\n      >\n        <p class=\"card-role_text\">{{project.role}}</p>\n      </div>\n      <div class=\"user-list\">\n        <div  *ngFor=\"let avatar of project.users_avatar; let idx = index\">\n          <div *ngIf=\"idx < 2\">\n            <img class=\"user-avatar\" src=\"{{avatar}}\" alt=\"\">\n          </div>\n        </div>\n        <div *ngIf=\"project.users_avatar.length > 3\">\n          <p class=\"avatar-text\">+{{ project.users_avatar.length - 2 }}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n\n</div>\n\n\n\n<ng-template #loading>Идёт загрузка...</ng-template>\n\n","import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {ProjectService} from '../shared/services/project.service';\nimport {NewProject} from '../shared/interfaces/interfaces';\n\n@Component({\n  selector: 'app-create-project-page',\n  templateUrl: './create-project-page.component.html',\n  styleUrls: ['./create-project-page.component.scss']\n})\nexport class CreateProjectPageComponent implements OnInit {\n\n  form: FormGroup\n  submitted: boolean = false\n  created: boolean = false\n\n  constructor(\n    private projectService: ProjectService\n  ) { }\n\n  ngOnInit(): void {\n    this.form = new FormGroup({\n      name: new FormControl('', [Validators.required]),\n      description: new FormControl('', [Validators.required])\n    })\n  }\n\n  createProject() {\n    this.submitted = true\n\n    if (this.form.invalid)\n    {\n      return\n    }\n\n    const project: NewProject = {\n      name: this.form.value.name,\n      description: this.form.value.description,\n      created_at: new Date()\n    }\n\n    this.projectService.createProject(project).subscribe(res => {\n      this.submitted = false\n      this.form.reset()\n      this.created = true\n    })\n  }\n}\n","<div class=\"mycontainer\">\n  <div class=\"form-wrap\">\n    <form *ngIf=\"!created; else projectcreated\" [formGroup]=\"form\" class=\"form\" (ngSubmit)=\"createProject()\">\n      <h2>Создание проекта</h2>\n      <div\n        class=\"form-control\"\n        [ngClass]=\"{invalid: form.get('name').touched && form.get('name').invalid}\"\n      >\n        <label for=\"name\" class=\"form-label\">Введите название проекта:</label>\n        <input type=\"text\" id=\"name\" class=\"form-input\" formControlName=\"name\">\n        <div\n          class=\"validation\"\n          *ngIf=\"form.get('name').touched && form.get('name').invalid\"\n        >\n            <small\n              *ngIf=\"form.get('name').errors.required\"\n            >\n              Поле не может быть пустым\n            </small>\n        </div>\n      </div>\n\n      <div\n        class=\"form-control\"\n        [ngClass]=\"{invalid: form.get('description').touched && form.get('description').invalid}\"\n      >\n        <label for=\"description\" class=\"form-label\">Введите краткое описание проекта:</label>\n        <textarea id=\"description\" class=\"form-textarea\" formControlName=\"description\"> </textarea>\n        <div\n          class=\"validation\"\n          *ngIf=\"form.get('description').touched && form.get('description').invalid\"\n        >\n          <small\n            *ngIf=\"form.get('description').errors.required\"\n          >\n            Поле не может быть пустым\n          </small>\n        </div>\n      </div>\n\n      <div class=\"form-button-wrap\">\n        <button\n          type=\"submit\"\n          class=\"form-button\"\n          [ngClass]=\"{invalid: form.invalid || submitted}\"\n          [disabled]=\"form.invalid || submitted\"\n        >Создать\n        </button>\n      </div>\n    </form>\n\n\n    <ng-template #projectcreated>\n      <div class=\"created\">\n        <img src=\"assets/img/icons/success.svg\" alt=\"\">\n        <p>Проект успешно создан!</p>\n        <a [routerLink]=\"['/user', 'projects']\">Проекты</a>\n      </div>\n\n    </ng-template>\n  </div>\n</div>\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n}\n","<router-outlet></router-outlet>\n","import {Injectable} from '@angular/core';\r\nimport {Observable, Subject} from 'rxjs';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class DataupdateService {\r\n  updateUserLayout = new Subject()\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {TaskUser} from '../interfaces/interfaces';\r\n\r\n@Pipe({\r\n  name: 'SearchProjectTasks'\r\n})\r\nexport class SearchProjectTasksPipe implements PipeTransform {\r\n  transform(tasks: TaskUser[], search = ''): TaskUser[] {\r\n    if(!search.trim())\r\n    {\r\n      return tasks\r\n    }\r\n\r\n    return tasks.filter(tasks => {\r\n      return tasks.project.toLowerCase().includes(search.toLowerCase())\r\n    })\r\n  }\r\n\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {minProject} from '../interfaces/interfaces';\r\n\r\n\r\n@Pipe({\r\n  name: 'searchProjects'\r\n})\r\nexport class SearchProjectsPipe implements PipeTransform{\r\n  transform(projects: minProject[], search = ''): minProject[] {\r\n    if(!search.trim())\r\n    {\r\n        return projects\r\n    }\r\n\r\n    return projects.filter(projects => {\r\n        return projects.title.toLowerCase().includes(search.toLowerCase())\r\n    })\r\n  }\r\n\r\n}\r\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {MainLayoutComponent} from './shared/components/main-layout/main-layout.component';\nimport {HomePageComponent} from './home-page/home-page.component';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {HttpClientModule} from '@angular/common/http';\nimport {AUTH_API_URL, RESOURCE_API_URL} from './app-injection-tokens';\nimport {environment} from '../environments/environment';\nimport {JwtModule} from '@auth0/angular-jwt';\nimport {ACCESS_TOKEN_KEY} from './shared/services/auth.service';\nimport { UserLayoutComponent } from './shared/components/user-layout/user-layout.component';\nimport { ProjectsPageComponent } from './projects-page/projects-page.component';\nimport {SearchProjectsPipe} from './shared/pipes/searchProjects.pipe';\nimport {SearchTasksPipe} from './shared/pipes/searchTasks.pipe'\nimport { CreateProjectPageComponent } from './create-project-page/create-project-page.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport { ProjectPageComponent } from './project-page/project-page.component';\nimport {registerLocaleData} from '@angular/common';\nimport ruLocale from '@angular/common/locales/ru';\nimport {FlatpickrModule} from 'angularx-flatpickr';\nimport { CreateTaskPageComponent } from './create-task-page/create-task-page.component';\nimport { TaskPageComponent } from './task-page/task-page.component';\nimport { TasksPageComponent } from './tasks-page/tasks-page.component';\nimport {NgPipesModule} from 'ngx-pipes';\nimport {SearchProjectTasksPipe} from './shared/pipes/searchProjectTasks.pipe';\nimport { AccountPageComponent } from './account-page/account-page.component';\nimport { AlifeFileToBase64Module } from 'alife-file-to-base64';\nimport { UpdateAccountPageComponent } from './update-account-page/update-account-page.component';\nimport { GantChartComponent } from './gant-chart/gant-chart.component';\nimport { GantProjectsComponent } from './gant-projects/gant-projects.component';\nimport { OptimizationPageComponent } from './optimization-page/optimization-page.component';\n\nexport function tokenGetter() {\n  return localStorage.getItem(ACCESS_TOKEN_KEY)\n}\n\nregisterLocaleData(ruLocale, 'ru')\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    MainLayoutComponent,\n    HomePageComponent,\n    UserLayoutComponent,\n    ProjectsPageComponent,\n    SearchProjectsPipe,\n    CreateProjectPageComponent,\n    ProjectPageComponent,\n    CreateTaskPageComponent,\n    TaskPageComponent,\n    SearchTasksPipe,\n    TasksPageComponent,\n    SearchProjectTasksPipe,\n    AccountPageComponent,\n    UpdateAccountPageComponent,\n    GantChartComponent,\n    GantProjectsComponent,\n    OptimizationPageComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    JwtModule.forRoot({\n      config: {\n        tokenGetter,\n        allowedDomains: environment.tokenWhiteListedDomains\n      }\n    }),\n    BrowserAnimationsModule,\n    FormsModule,\n    FlatpickrModule.forRoot(),\n    NgPipesModule,\n    MatExpansionModule,\n    AlifeFileToBase64Module\n  ],\n  providers: [{\n      provide: AUTH_API_URL,\n      useValue: environment.authApi\n    },\n    {\n      provide: RESOURCE_API_URL,\n      useValue: environment.projectManagementApi\n    }],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {Component, ElementRef, OnDestroy, OnInit, ViewChild, ViewEncapsulation} from '@angular/core';\n\nimport \"dhtmlx-gantt\";\nimport {gantt} from 'dhtmlx-gantt';\nimport {GantTaskService} from '../shared/services/gant.task.service';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n  encapsulation: ViewEncapsulation.None,\n  selector: 'app-gant-chart',\n  templateUrl: './gant-chart.component.html',\n  styleUrls: ['./gant-chart.component.scss'],\n  providers: [GantTaskService]\n})\nexport class GantChartComponent implements OnInit, OnDestroy {\n\n  @ViewChild(\"ganttHere\",{static: true}) ganttContainer: ElementRef;\n\n  constructor(\n    private taskService: GantTaskService,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    gantt.config.readonly = true;\n    gantt.config.select_task  = false;\n    gantt.config.xml_date = \"%Y-%m-%d %H:%i\";\n    gantt.config.grid_width = 400;\n    gantt.i18n.setLocale(\"ru\");\n    gantt.config.columns=[\n      {name:\"text\",       label:\"Задача\",  align: \"center\", width: 200 },\n      {name:\"start_date\", label:\"Начало\", align: \"center\", width: 100 },\n      {name: \"end_date\", label:\"Конец\", align: \"center\", width: 100}\n    ];\n    gantt.init(this.ganttContainer.nativeElement);\n    Promise.all([this.taskService.get(this.route.snapshot.params['id'])])\n      .then(([data]) => {\n        gantt.parse({data});\n      });\n  }\n\n  ngOnDestroy() {\n    gantt.clearAll()\n  }\n\n}\n","<div class=\"mycontainer\">\n  <div class=\"gant-wrap\">\n    <div #ganttHere class='gantt-chart'></div>\n  </div>\n\n</div>\n\n","import {InjectionToken} from '@angular/core';\r\n\r\nexport const AUTH_API_URL = new InjectionToken<string>('auth api url')\r\nexport const RESOURCE_API_URL = new InjectionToken<string>('projectManagement api url')\r\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {AuthService} from '../shared/services/auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n\n  constructor(private authService: AuthService, private router: Router) {\n  }\n\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): boolean {\n    if (this.authService.isAuthenticated()) {\n      return true\n    } else {\n      this.authService.logout()\n      return undefined\n    }\n  }\n\n}\n","import {Inject, Injectable} from '@angular/core';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {Task, TaskUser, UpdateTask} from '../interfaces/interfaces';\r\nimport {RESOURCE_API_URL} from '../../app-injection-tokens';\r\nimport {map} from 'rxjs/operators';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class TaskService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject(RESOURCE_API_URL) private apiUrl: string\r\n  ) {\r\n  }\r\n\r\n  getTaskById(id: string): Observable<Task> {\r\n    return this.http.get<any>(`${this.apiUrl}api/tasks/task`, {\r\n      params: new HttpParams().set('id', id)\r\n    })\r\n      .pipe(\r\n        map((response: Task[]) => {\r\n            return response[0]\r\n        })\r\n      )\r\n  }\r\n\r\n  updateTaskStatus(task: UpdateTask): Observable<UpdateTask> {\r\n    return this.http.put<any>(`${this.apiUrl}api/tasks/task/update`, task)\r\n  }\r\n\r\n  getTasksByUser(): Observable<TaskUser[]> {\r\n    return this.http.get<TaskUser[]>(`${this.apiUrl}api/tasks/user`)\r\n  }\r\n}\r\n","import {Inject, Injectable} from '@angular/core';\r\nimport {OptimizationAnswer, OptimizationCombinedObjectiveFunction} from '../interfaces/interfaces';\r\nimport {Observable} from 'rxjs';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {RESOURCE_API_URL} from '../../app-injection-tokens';\r\nimport {map} from 'rxjs/operators';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class OptimizationService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject(RESOURCE_API_URL) private apiUrl: string\r\n    ) {\r\n  }\r\n\r\n  GetAnswerCombinedObjectiveFunction(task: OptimizationCombinedObjectiveFunction): Observable<OptimizationAnswer> {\r\n    return this.http.post<OptimizationAnswer>(`${this.apiUrl}api/optimization/combinedfunction`, task)\r\n  }\r\n}\r\n","import {Component, OnInit, ViewEncapsulation} from '@angular/core';\nimport {ProjectService} from '../shared/services/project.service';\nimport {ActivatedRoute, Params, Router} from '@angular/router';\nimport {switchMap} from 'rxjs/operators';\nimport {Project, Task,  UserToProject} from '../shared/interfaces/interfaces';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {DatasearchService} from '../shared/services/datasearch.service';\n\n\n\n\n@Component({\n  selector: 'app-project-page',\n  templateUrl: './project-page.component.html',\n  styleUrls: ['./project-page.component.scss']\n})\nexport class ProjectPageComponent implements OnInit {\n\n  projectId: string\n  project: Project\n  submitted: boolean = false\n  formAddUser: FormGroup\n  openFormAddUser: boolean = false\n  tasks$: Observable<Task[]>\n  searchStr: string = ''\n\n  constructor(\n    private projectService: ProjectService,\n    private route: ActivatedRoute,\n    private dataSearchService: DatasearchService\n  ) {\n  }\n\n  ngOnInit(): void {\n    this.route.params.pipe(\n      switchMap((params: Params) => {\n          return this.projectService.getProjectById(params['id'])\n      })\n    ).subscribe( (project: Project[]) => {\n      this.project = project[0]\n    })\n    this.tasks$ = this.projectService.getTasks(this.route.snapshot.params['id'])\n    this.dataSearchService.searchStr.subscribe(str => {\n      this.searchStr = str\n    })\n  }\n\n\n  toggleFormAddUser() {\n    this.openFormAddUser = !this.openFormAddUser\n    if (!this.formAddUser) {\n      this.formAddUser = new FormGroup({\n        email: new FormControl('', [\n          Validators.email,\n          Validators.required\n        ]),\n        role: new FormControl('1')\n      })\n    }\n  }\n\n  addUser() {\n    if (this.formAddUser.invalid)\n    {\n      return\n    }\n    this.submitted = true\n\n    const userToProject: UserToProject = {\n      email: this.formAddUser.value.email,\n      ProjectId: this.route.snapshot.params['id'],\n      RoleId: this.formAddUser.value.role\n    }\n\n    this.projectService.addUser(userToProject).subscribe(response => {\n        this.formAddUser.reset()\n        this.submitted = false\n        this.openFormAddUser = false\n    }, error => {\n      if (error.error === 'EMAIL_NOT_FOUND')\n      {\n        this.formAddUser.get('email').setErrors({\n          uniqEmail: true\n        })\n        this.submitted = false\n      }\n      if (error.error === 'USER_ALREADY_EXIST')\n      {\n        this.formAddUser.get('email').setErrors({\n          alreadyExistEmail: true\n        })\n        this.submitted = false\n      }\n    })\n  }\n}\n","<div class=\"mycontainer\">\n  <div class=\"wrap\" *ngIf=\"project\">\n\n    <div class=\"header\">\n\n      <div class=\"header-text\">\n        <h2 class=\"header-text_title\">{{project.name}}</h2>\n        <p class=\"header-text_description\">{{project.description}}</p>\n      </div>\n\n      <div class=\"header-info\">\n        <div class=\"header-info-director\">\n          <label for=\"director_avatar\">Директор проекта:</label>\n          <img src=\"{{project.owner_avatar}}\" [routerLink]=\"['/user', 'account', 'get', project.owner_id]\" id=\"director_avatar\">\n        </div>\n        <p class=\"header-info_date\">Дата создания: {{project.created_at | date: 'longDate': null: 'ru'}}</p>\n      </div>\n\n    </div>\n\n    <div class=\"additive\" *ngIf=\"project.role != 'Пользователь'\">\n\n      <div class=\"add\" *ngIf=\"project.role === 'Менеджер' || project.role === 'Директор'\" [routerLink]=\"['create', 'task']\">\n        <img src=\"assets/img/plus.png\" alt=\"\">\n        <p>Добавить задание</p>\n      </div>\n      <div class=\"add\" *ngIf=\"project.role === 'Директор'\" (click)=\"toggleFormAddUser()\">\n        <img src=\"assets/img/plus.png\" alt=\"\">\n        <p>Добавить участника</p>\n      </div>\n\n    </div>\n\n    <form [formGroup]=\"formAddUser\" *ngIf=\"openFormAddUser\" class=\"form\" (ngSubmit)=\"addUser()\">\n\n      <div class=\"form-control\"\n           [ngClass]=\"{invalid: formAddUser.get('email').touched && formAddUser.get('email').invalid}\"\n      >\n        <input type=\"text\" formControlName=\"email\" placeholder=\"Введите email\">\n        <div class=\"validation\"\n             *ngIf=\"formAddUser.get('email').touched && formAddUser.get('email').invalid\"\n        >\n          <small\n            *ngIf=\"formAddUser.get('email').errors.required\"\n          >Поле не может быть пустым</small>\n          <small\n            *ngIf=\"formAddUser.get('email').errors.email\"\n          >Введён некорректный email</small>\n          <small\n            *ngIf=\"formAddUser.get('email').errors.uniqEmail\"\n          >Пользователя с таким email не существует</small>\n          <small\n            *ngIf=\"formAddUser.get('email').errors.alreadyExistEmail\"\n          >Пользователь с таким email уже участвует в проекте</small>\n        </div>\n      </div>\n\n      <div class=\"form-control\">\n        <select formControlName=\"role\">\n          <option value=\"1\">Менеджер</option>\n          <option value=\"2\">Пользователь</option>\n        </select>\n      </div>\n\n      <button\n        type=\"submit\"\n        [ngClass]=\"{invalid: formAddUser.invalid || submitted}\"\n        [disabled]=\"formAddUser.invalid || submitted\"\n      >Добавить\n      </button>\n    </form>\n\n\n    <div *ngIf=\"tasks$ | async as tasks\" class=\"table-responsive\">\n      <table class=\"table table-bordered\">\n            <thead>\n              <tr>\n                <th>Название</th>\n                <th>Начало работы</th>\n                <th>Конец работы</th>\n                <th>Исполнитель</th>\n                <th>Статус</th>\n              </tr>\n            </thead>\n\n            <tbody>\n                <tr *ngFor=\"let task of tasks | searchTasks:searchStr\">\n                  <td\n                    [ngClass]=\"{\n                    important: task.priority === 'Важно',\n                    'never-mind': task.priority === 'Неважно'\n                    }\"\n                    class=\"task-name\"\n                    [routerLink]=\"['/user', 'task', task.id]\"\n                  >{{task.name}}</td>\n                  <td>{{task.start_date | date:'d MMM , y, HH:mm:ss':null:'ru'}}</td>\n                  <td>{{task.end_date | date:'d MMM , y, HH:mm:ss':null:'ru'}}</td>\n                  <td>{{task.executor}}</td>\n                  <td\n                    [ngClass]=\"{\n                    pending: task.status === 'В ожидании',\n                    process: task.status === 'В процессе',\n                    done: task.status === 'Готово'\n                    }\"\n                  >{{task.status}}</td>\n                </tr>\n            </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n\n","import {Inject, Injectable} from '@angular/core';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {User} from '../interfaces/interfaces';\r\nimport {RESOURCE_API_URL} from '../../app-injection-tokens';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class UserService\r\n{\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject(RESOURCE_API_URL) private apiUrl: string\r\n  ) {}\r\n\r\n  getUser(): Observable<User> {\r\n    return this.http.get<User>(`${this.apiUrl}api/users/im`)\r\n  }\r\n\r\n  declOfNum(number: number, words: string[]): string {\r\n    return words[(number % 100 > 4 && number % 100 < 20) ? 2 : [2, 0, 1, 1, 1, 2][(number % 10 < 5) ? number % 10 : 5]];\r\n  }\r\n\r\n  updateUser(user: User): Observable<User> {\r\n    return this.http.put<User>(`${this.apiUrl}api/users/update`, user)\r\n  }\r\n\r\n  getUserById(id: string): Observable<User> {\r\n    return this.http.get<User>(`${this.apiUrl}api/users/user`, {\r\n      params: new HttpParams().set('id', id)\r\n    })\r\n  }\r\n}\r\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ProjectService} from '../shared/services/project.service';\nimport {minProject} from '../shared/interfaces/interfaces';\nimport {Observable} from 'rxjs';\nimport {DatasearchService} from '../shared/services/datasearch.service';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-projects-page',\n  templateUrl: './projects-page.component.html',\n  styleUrls: ['./projects-page.component.scss']\n})\nexport class ProjectsPageComponent implements OnInit {\n\n  minProject$: Observable<minProject[]>\n  searchStr: string\n\n  constructor(\n    private projectService: ProjectService,\n    private dataSearchService: DatasearchService,\n    private router: Router\n  ) { }\n\n  ngOnInit(): void {\n    this.minProject$ = this.projectService.getProjects()\n    this.dataSearchService.searchStr.subscribe(str => {\n      this.searchStr = str\n    })\n  }\n\n  navigateToNewProject() {\n    this.router.navigate([\"/user\", \"projects\", \"create\"])\n  }\n}\n"," <div *ngIf=\"minProject$ | async as projects; else loading\" class=\"mycontainer\">\n      <div class=\"card-newproject\" (click)=\"navigateToNewProject()\">\n        <img src=\"assets/img/plus.png\" class=\"card-newproject-img\" alt=\"\">\n        <h3>Создать проект</h3>\n      </div>\n\n      <div *ngFor=\"let project of projects | searchProjects:searchStr\" class=\"card\" [routerLink]=\"['/user', 'projects', project.id]\">\n\n          <h2>{{project.title}}</h2>\n          <p class=\"card-text\">{{project.description}}</p>\n          <div class=\"wrap\">\n            <div\n              class=\"card-role\"\n              [ngClass]=\"{\n              manager: project.role === 'Менеджер',\n              director: project.role === 'Директор',\n              user: project.role === 'Пользователь'\n          }\"\n            >\n              <p class=\"card-role_text\">{{project.role}}</p>\n            </div>\n            <div class=\"user-list\">\n              <div  *ngFor=\"let avatar of project.users_avatar; let idx = index\">\n                <div *ngIf=\"idx < 2\">\n                  <img class=\"user-avatar\" src=\"{{avatar}}\" alt=\"\">\n                </div>\n              </div>\n              <div *ngIf=\"project.users_avatar.length > 3\">\n                <p class=\"avatar-text\">+{{ project.users_avatar.length - 2 }}</p>\n              </div>\n            </div>\n          </div>\n      </div>\n\n    </div>\n\n\n\n  <ng-template #loading>Идёт загрузка...</ng-template>\n\n","import {Component, OnInit} from '@angular/core';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {User} from '../shared/interfaces/interfaces';\nimport {UserService} from '../shared/services/user.service';\nimport {DataupdateService} from '../shared/services/dataupdate.service';\n\n@Component({\n  selector: 'app-update-account-page',\n  templateUrl: './update-account-page.component.html',\n  styleUrls: ['./update-account-page.component.scss']\n})\nexport class UpdateAccountPageComponent implements OnInit {\n\n  form: FormGroup\n  submitted: boolean = false\n  avatar: string = ''\n  user: User\n  updated: boolean = false\n  data: File\n  avatar_min: string = ''\n\n\n  constructor(\n    private userService: UserService,\n    private dataUpdateService: DataupdateService\n  ) { }\n\n  ngOnInit(): void {\n    this.form = new FormGroup({\n      phone: new FormControl(''),\n      avatar: new FormControl('')\n    })\n    this.userService.getUser().subscribe(user => {\n      this.user = user\n    })\n  }\n\n\n  onFileChanges(event: any) {\n    this.avatar = event[0].base64\n  }\n\n  updateAccount() {\n    if (this.form.invalid)\n    {\n      return\n    }\n\n    this.submitted = true\n\n    const user: User = {\n      userId: this.user.userId,\n      fio: this.user.fio,\n      created_at: this.user.created_at,\n      email: this.user.email,\n      phone: this.form.value.phone,\n      avatar: this.avatar,\n      avatar_min: this.avatar_min\n    }\n    this.userService.updateUser(user).subscribe( user => {\n      this.submitted = false\n      this.form.reset()\n      this.updated = true\n      this.dataUpdateService.updateUserLayout.next()\n    })\n  }\n\n  compress(event: any) {\n    this.submitted = true\n    const width = 70;\n    const height = 70;\n    const fileName = event.target.files[0].name;\n    const reader = new FileReader();\n\n    reader.readAsDataURL(event.target.files[0])\n    reader.onload = event => {\n      const img = new Image()\n\n      img.src = event.target.result.toString()\n      img.onload = () => {\n        const elem = document.createElement('canvas')\n        elem.width = width\n        elem.height = height\n        const ctx = elem.getContext('2d')\n\n        ctx.drawImage(img, 0, 0, width, height)\n        this.avatar_min = ctx.canvas.toDataURL('image/jpeg')\n        this.submitted = false\n      }\n    }\n  }\n\n}\n","<div class=\"mycontainer\">\n  <div class=\"wrap\">\n\n    <div *ngIf=\"user\">\n\n\n      <form *ngIf=\"!updated; else userupdated\" class=\"form\" [formGroup]=\"form\" (ngSubmit)=\"updateAccount()\">\n        <h2>Обновление данных аккаунта</h2>\n        <p>ФИО: {{user.fio}}</p>\n        <p>Email: {{user.email}}</p>\n        <div\n          class=\"form-control\"\n        >\n          <label for=\"phone\" class=\"form-label\">Введите телефон:</label>\n          <input type=\"text\" id=\"phone\" class=\"form-input\" formControlName=\"phone\">\n        </div>\n\n        <div\n          class=\"form-control\"\n        >\n          <div class=\"img-wrap\">\n            <img src=\"{{avatar}}\" *ngIf=\"avatar\">\n          </div>\n          <label for=\"avatar\" class=\"form-label\">Загрузите аватар:</label>\n          <div class=\"form-inputfile\">\n            <label>\n              <input type=\"file\" id=\"avatar\" accept=\"image/gif, image/jpeg\" alife-file-to-base64 (onFileChanged)=\"onFileChanges($event)\" (change)=\"compress($event)\" formControlName=\"avatar\">\n              <span>Выберите изображение</span>\n            </label>\n          </div>\n        </div>\n\n        <div class=\"form-button-wrap\">\n          <button\n            type=\"submit\"\n            class=\"form-button\"\n            [ngClass]=\"{invalid: submitted}\"\n            [disabled]=\"submitted\"\n          >Обновить\n          </button>\n        </div>\n      </form>\n\n      <ng-template #userupdated>\n        <div class=\"created\">\n          <img src=\"assets/img/icons/success.svg\" alt=\"\">\n          <p>Данные успешно обновлены!</p>\n          <a [routerLink]=\"['/user', 'account']\">Мой аккаунт</a>\n        </div>\n\n      </ng-template>\n    </div>\n\n\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {DatasearchService} from '../../services/datasearch.service';\nimport {UserService} from '../../services/user.service';\nimport {User} from '../../interfaces/interfaces';\nimport {AuthService} from '../../services/auth.service';\nimport {DataupdateService} from '../../services/dataupdate.service';\n\n@Component({\n  selector: 'app-user-layout',\n  templateUrl: './user-layout.component.html',\n  styleUrls: ['./user-layout.component.scss']\n})\nexport class UserLayoutComponent implements OnInit {\n\n  user: User\n  openSettings: boolean = false\n\n  constructor(\n    private dataSearchService: DatasearchService,\n    private userService: UserService,\n    private authService: AuthService,\n    private dataUpdateService: DataupdateService\n    ) { }\n\n  set searchStr(searchStr: string) {\n      this.dataSearchService.searchStr.next(searchStr)\n  }\n  ngOnInit(): void {\n    this.getUserData()\n    this.dataUpdateService.updateUserLayout.subscribe(u => {\n      this.getUserData()\n    })\n  }\n\n  getUserData()\n  {\n    this.userService.getUser().subscribe( user => {\n      this.user = user\n    })\n  }\n\n  logout() {\n    this.authService.logout()\n  }\n}\n","<div class=\"wrap\">\n  <div class=\"nav\">\n    <h2>Управление проектами</h2>\n    <ul>\n      <li class=\"nav-item\" routerLink=\"/user/projects\" routerLinkActive=\"open\">\n        <img src=\"./assets/img/icons/project.png\">\n        <a >Проекты</a>\n      </li>\n      <li class=\"nav-item\" routerLink=\"/user/tasks\" routerLinkActive=\"open\">\n        <img src=\"./assets/img/icons/tasks.png\">\n        <a >Мои задачи</a>\n      </li>\n      <li class=\"nav-item\" routerLink=\"/user/gant/projects\" routerLinkActive=\"open\">\n        <img src=\"./assets/img/icons/diagram.png\">\n        <a >Диаграмма ганта</a>\n      </li>\n      <li class=\"nav-item\" routerLink=\"/user/optimization\" routerLinkActive=\"open\">\n        <img src=\"./assets/img/icons/optimization.png\">\n        <a >Оптимизация</a>\n      </li>\n    </ul>\n\n  </div>\n\n  <div class=\"div\">\n    <div class=\"user-panel\">\n      <div class=\"input-wrap\">\n        <input type=\"text\" placeholder=\"Поиск\" [(ngModel)]=\"searchStr\">\n      </div>\n      <div class=\"content-wrap\">\n        <a (click)=\"openSettings = !openSettings\" >Мой аккаунт</a>\n        <div *ngIf=\"openSettings\" class=\"settings-menu\">\n            <ul>\n              <li class=\"settings-menu_item\" [routerLink]=\"['/user', 'account', 'update']\">Редактирование</li>\n              <li class=\"settings-menu_item\" (click)=\"logout()\">Выйти</li>\n            </ul>\n        </div>\n        <img *ngIf=\"user\"  src=\"{{user.avatar_min}}\" class=\"avatar\" [routerLink]=\"['/user', 'account']\">\n      </div>\n    </div>\n    <div class=\"user-components\">\n      <router-outlet></router-outlet>\n    </div>\n\n  </div>\n\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {UserService} from '../shared/services/user.service';\nimport {User} from '../shared/interfaces/interfaces';\nimport {ActivatedRoute} from '@angular/router';\n\n\n@Component({\n  selector: 'app-account-page',\n  templateUrl: './account-page.component.html',\n  styleUrls: ['./account-page.component.scss']\n})\nexport class AccountPageComponent implements OnInit {\n\n  user: User\n  daysPassed: number\n  daysStr: string\n  files: any[]\n\n  constructor(\n    private userService: UserService,\n    private route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    if (this.route.snapshot.params['id'])\n    {\n      this.userService.getUserById(this.route.snapshot.params['id']).subscribe(user => {\n        this.user = user\n        const currentData = new Date()\n        this.daysPassed = Math.floor((Date.parse(currentData.toString()) - Date.parse(this.user.created_at)) / 86400000)\n        this.daysStr = this.userService.declOfNum(this.daysPassed, ['день', 'дня', 'дней'])\n      })\n    } else {\n      this.userService.getUser().subscribe(user => {\n        this.user = user\n        const currentData = new Date()\n        this.daysPassed = Math.floor((Date.parse(currentData.toString()) - Date.parse(this.user.created_at)) / 86400000)\n        this.daysStr = this.userService.declOfNum(this.daysPassed, ['день', 'дня', 'дней'])\n      })\n    }\n\n\n  }\n\n}\n","<div class=\"mycontainer\">\n  <div class=\"wrap\" *ngIf=\"user; else loading\">\n\n    <div class=\"header\">\n\n      <div class=\"header-text\">\n        <h2 class=\"header-text_title\">{{user.fio}}</h2>\n        <p class=\"header-text_description\">{{user.email}}</p>\n        <p class=\"header-info_date\">Пользователь на сайте: {{daysPassed+' '+daysStr}}</p>\n        <p class=\"header-text_phone\" *ngIf=\"user.phone\">Телефон: {{user.phone}}</p>\n      </div>\n\n      <div class=\"header-info\">\n        <div class=\"header-info-director\">\n          <img src=\"{{user.avatar}}\" id=\"director_avatar\">\n        </div>\n\n      </div>\n\n    </div>\n\n\n\n  </div>\n  <ng-template #loading>Идёт загрузка...</ng-template>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport {TaskService} from '../shared/services/task.service';\nimport {ActivatedRoute} from '@angular/router';\nimport {Task, UpdateTask} from '../shared/interfaces/interfaces';\nimport {Location} from '@angular/common';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\n\n@Component({\n  selector: 'app-task-page',\n  templateUrl: './task-page.component.html',\n  styleUrls: ['./task-page.component.scss']\n})\nexport class TaskPageComponent implements OnInit {\n\n  task: Task\n  form: FormGroup\n  submitted: boolean = false\n  update: boolean = false\n\n  constructor(\n    private taskService: TaskService,\n    private route: ActivatedRoute,\n    private location: Location\n  ) { }\n\n  ngOnInit(): void {\n    this.taskService.getTaskById(this.route.snapshot.params['id']).subscribe( (task: Task) => {\n      this.task = task\n      if (this.task.mytask)\n      {\n        this.form = new FormGroup({\n          status: new FormControl('1', [Validators.required])\n        })\n      }\n    })\n\n  }\n\n  goBack() {\n    this.location.back()\n  }\n\n  updateStatus() {\n    console.log(this.form.value)\n\n    if(this.form.invalid)\n    {\n      return\n    }\n\n    this.submitted = true\n    const task: UpdateTask = {\n      id: this.route.snapshot.params['id'],\n      status: this.form.value.status\n    }\n\n    this.taskService.updateTaskStatus(task).subscribe(resp => {\n      this.submitted = false\n      this.update = true\n      console.log(resp)\n    })\n  }\n}\n","<div class=\"mycontainer\">\n  <div *ngIf=\"task; else loading\" class=\"wrap\">\n      <div class=\"task\">\n\n\n        <div class=\"task-header\">\n          <h2>{{task.description}}</h2>\n          <button class=\"task-header_button\" (click)=\"goBack()\">Назад</button>\n        </div>\n\n\n          <p class=\"task-description\">{{task.description}}</p>\n          <p class=\"task-start_date\">Дата начала работы: {{task.start_date | date:'d MMM , y, HH:mm:ss':null:'ru'}}</p>\n          <p class=\"task_end_date\">Дата окончания работы: {{task.end_date | date:'d MMM , y, HH:mm:ss':null:'ru'}}</p>\n          <div class=\"task-executor\"><p>Испольнитель: </p> <img [routerLink]=\"['/user', 'account', 'get', task.executorId]\" src=\"{{task.avatar}}\" alt=\"\"> <p class=\"task-executor_fio\" [routerLink]=\"['/user', 'account', 'get', task.executorId]\">{{task.executor}}</p></div>\n          <div class=\"task-status\">\n            <p *ngIf=\"!task.mytask\">Статус: {{task.status}}</p>\n            <form *ngIf=\"task.mytask && !update\" [formGroup]=\"form\" (ngSubmit)=\"updateStatus()\" class=\"form\">\n\n              <div\n                class=\"form-control\"\n                [ngClass]=\"{invalid: form.get('status').touched && form.get('status').invalid}\"\n              >\n                <label for=\"status\" class=\"form-label\">Изменить статус задания:</label>\n                <select formControlName=\"status\" id=\"status\">\n                  <option value=\"1\">В процессе</option>\n                  <option value=\"2\">Готово</option>\n                </select>\n                <div\n                  class=\"validation\"\n                  *ngIf=\"form.get('status').touched && form.get('status').invalid\"\n                >\n                  <small\n                    *ngIf=\"form.get('status').errors.required\"\n                  >\n                    Поле не может быть пустым\n                  </small>\n                </div>\n              </div>\n\n\n              <button\n                type=\"submit\"\n                class=\"form-button\"\n                [ngClass]=\"{invalid: form.invalid || submitted}\"\n                [disabled]=\"form.invalid || submitted\"\n              >Обновить статус\n              </button>\n\n            </form>\n            <p *ngIf=\"update\">Статус успешно обновлён</p>\n          </div>\n\n      </div>\n  </div>\n\n\n\n  <ng-template #loading>Идёт загрузка...</ng-template>\n</div>\n","import { NgModule } from '@angular/core';\nimport {Routes, RouterModule, PreloadAllModules} from '@angular/router';\nimport {MainLayoutComponent} from './shared/components/main-layout/main-layout.component';\nimport {HomePageComponent} from './home-page/home-page.component';\nimport {UserLayoutComponent} from './shared/components/user-layout/user-layout.component';\nimport {ProjectsPageComponent} from './projects-page/projects-page.component';\nimport {AuthGuard} from './guard/auth.guard';\nimport {CreateProjectPageComponent} from './create-project-page/create-project-page.component';\nimport {ProjectPageComponent} from './project-page/project-page.component';\nimport {CreateTaskPageComponent} from './create-task-page/create-task-page.component';\nimport {TaskPageComponent} from './task-page/task-page.component';\nimport {TasksPageComponent} from './tasks-page/tasks-page.component';\nimport {AccountPageComponent} from './account-page/account-page.component';\nimport {UpdateAccountPageComponent} from './update-account-page/update-account-page.component';\nimport {GantProjectsComponent} from './gant-projects/gant-projects.component';\nimport {GantChartComponent} from './gant-chart/gant-chart.component';\nimport {OptimizationPageComponent} from './optimization-page/optimization-page.component';\n\nconst routes: Routes = [\n  {\n    path: '', component: MainLayoutComponent, children: [\n      {path: '', redirectTo: '/', pathMatch: 'full'},\n      {path: '', component: HomePageComponent},\n    ]\n  },\n  {\n    path: 'user', component: UserLayoutComponent, children: [\n      {path: '', redirectTo: 'projects', pathMatch: 'full'},\n      {path: 'projects', component: ProjectsPageComponent, canActivate: [AuthGuard]},\n      {path: 'projects/create', component: CreateProjectPageComponent, canActivate: [AuthGuard]},\n      {path: 'projects/:id', component: ProjectPageComponent, canActivate: [AuthGuard]},\n      {path: 'projects/:id/create/task', component: CreateTaskPageComponent, canActivate: [AuthGuard]},\n      {path: 'task/:id', component: TaskPageComponent, canActivate: [AuthGuard]},\n      {path: 'tasks', component: TasksPageComponent, canActivate: [AuthGuard]},\n      {path: 'account', component: AccountPageComponent, canActivate: [AuthGuard]},\n      {path: 'account/get/:id', component: AccountPageComponent, canActivate: [AuthGuard]},\n      {path: 'account/update', component: UpdateAccountPageComponent, canActivate: [AuthGuard]},\n      {path: 'gant/projects', component: GantProjectsComponent, canActivate: [AuthGuard]},\n      {path: 'gant/projects/:id', component: GantChartComponent, canActivate: [AuthGuard]},\n      {path: 'optimization', component: OptimizationPageComponent, canActivate: [AuthGuard]}\n    ]\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes, {\n    preloadingStrategy: PreloadAllModules\n  })],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {FormControl, FormGroup, Validators} from '@angular/forms';\nimport {Observable} from 'rxjs';\nimport {AddTask, UsersOfProject} from '../shared/interfaces/interfaces';\nimport {ProjectService} from '../shared/services/project.service';\nimport {formatDate} from '@angular/common';\nimport {FlatpickrDefaultsInterface} from 'angularx-flatpickr/flatpickr-defaults.service';\nimport flatpickr from 'flatpickr';\nimport {Russian} from 'flatpickr/dist/l10n/ru';\n\nfunction flatpickrFactory() {\n  flatpickr.localize(Russian)\n  return flatpickr\n}\n\n@Component({\n  selector: 'app-create-task-page',\n  templateUrl: './create-task-page.component.html',\n  styleUrls: ['./create-task-page.component.scss']\n})\nexport class CreateTaskPageComponent implements OnInit {\n\n  formAddTask: FormGroup\n  usersOfProject$: Observable<UsersOfProject[]>\n  submitted: boolean = false\n  created: boolean = false\n\n  options: FlatpickrDefaultsInterface = {\n    enable: [\n      {\n        from: '2019-04-01',\n        to: '2025-05-01'\n      }\n    ]\n  }\n\n  constructor(\n    public route: ActivatedRoute,\n    private projectService: ProjectService\n  ) { }\n\n  ngOnInit(): void {\n    this.usersOfProject$ = this.projectService.getUsersOfProject(this.route.snapshot.params['id'])\n\n    this.formAddTask = new FormGroup({\n      name: new FormControl('', [Validators.required]),\n      description: new FormControl('', [Validators.required]),\n      start_date: new FormControl('', [Validators.required]),\n      end_date: new FormControl('', [Validators.required]),\n      executor: new FormControl('', [Validators.required]),\n      priority: new FormControl('', [Validators.required])\n    })\n    flatpickrFactory()\n  }\n\n\n  addTask() {\n    if (this.formAddTask.invalid)\n    {\n      return\n    }\n    this.submitted = true\n    const task: AddTask = {\n      UserId: this.formAddTask.value.executor,\n      name: this.formAddTask.value.name,\n      description: this.formAddTask.value.description,\n      start_date: formatDate(this.formAddTask.value.start_date, 'yyyy-MM-dd HH:mm:ss', 'ru'),\n      end_date: formatDate(this.formAddTask.value.end_date, 'yyyy-MM-dd HH:mm:ss', 'ru'),\n      PriorityId: this.formAddTask.value.priority,\n      ProjectId: this.route.snapshot.params['id']\n    }\n\n    this.projectService.addTask(task).subscribe(res => {\n      this.formAddTask.reset()\n      this.submitted = false\n      this.created = true\n    })\n  }\n}\n","<div class=\"mycontainer\">\n  <div class=\"form-wrap\">\n    <form *ngIf=\"!created; else taskcreated\" [formGroup]=\"formAddTask\" (ngSubmit)=\"addTask()\" class=\"form\">\n      <h2>Создание задачи</h2>\n\n      <div\n        class=\"form-control\"\n        [ngClass]=\"{invalid: formAddTask.get('name').touched && formAddTask.get('name').invalid}\"\n      >\n        <label for=\"name\" class=\"form-label\">Введите название задания:</label>\n        <input type=\"text\" id=\"name\" class=\"form-input\" formControlName=\"name\">\n        <div\n          class=\"validation\"\n          *ngIf=\"formAddTask.get('name').touched && formAddTask.get('name').invalid\"\n        >\n          <small\n            *ngIf=\"formAddTask.get('name').errors.required\"\n          >\n            Поле не может быть пустым\n          </small>\n        </div>\n      </div>\n\n\n      <div\n        class=\"form-control\"\n        [ngClass]=\"{invalid: formAddTask.get('description').touched && formAddTask.get('description').invalid}\"\n      >\n        <label for=\"description\" class=\"form-label\">Введите описание задания:</label>\n        <textarea id=\"description\" class=\"form-textarea\" formControlName=\"description\"> </textarea>\n        <div\n          class=\"validation\"\n          *ngIf=\"formAddTask.get('description').touched && formAddTask.get('description').invalid\"\n        >\n          <small\n            *ngIf=\"formAddTask.get('description').errors.required\"\n          >\n            Поле не может быть пустым\n          </small>\n        </div>\n      </div>\n\n\n      <div\n        class=\"form-control\"\n        [ngClass]=\"{invalid: formAddTask.get('start_date').touched && formAddTask.get('start_date').invalid}\"\n      >\n        <label for=\"start_date\" class=\"form-label\">Выберите дату начала выполнения задания:</label>\n        <input\n          [ngClass]=\"{invalid: formAddTask.get('start_date').touched && formAddTask.get('start_date').invalid}\"\n          class=\"form-input\"\n          id=\"start_date\"\n          type=\"text\"\n          mwlFlatpickr\n          [convertModelValue]=\"true\"\n          [enableTime]=\"true\"\n          [options]=\"options\"\n          dateFormat=\"Y-m-d H:i\"\n          formControlName=\"start_date\"\n        >\n        <div\n          class=\"validation\"\n          *ngIf=\"formAddTask.get('start_date').touched && formAddTask.get('start_date').invalid\"\n        >\n          <small\n            *ngIf=\"formAddTask.get('start_date').errors.required\"\n          >\n            Поле не может быть пустым\n          </small>\n        </div>\n      </div>\n\n      <div\n        class=\"form-control\"\n        [ngClass]=\"{invalid: formAddTask.get('end_date').touched && formAddTask.get('end_date').invalid}\"\n      >\n        <label for=\"end_date\" class=\"form-label\">Выберите дату окончания выполнения задания:</label>\n        <input\n          [ngClass]=\"{invalid: formAddTask.get('end_date').touched && formAddTask.get('end_date').invalid}\"\n          class=\"form-input\"\n          id=\"end_date\"\n          type=\"text\"\n          mwlFlatpickr\n          [convertModelValue]=\"true\"\n          [enableTime]=\"true\"\n          [options]=\"options\"\n          dateFormat=\"Y-m-d H:i\"\n          formControlName=\"end_date\"\n        >\n        <div\n          class=\"validation\"\n          *ngIf=\"formAddTask.get('end_date').touched && formAddTask.get('end_date').invalid\"\n        >\n          <small\n            *ngIf=\"formAddTask.get('end_date').errors.required\"\n          >\n            Поле не может быть пустым\n          </small>\n        </div>\n      </div>\n\n\n        <div\n          class=\"form-control\"\n          [ngClass]=\"{invalid: formAddTask.get('executor').touched && formAddTask.get('executor').invalid}\"\n        >\n          <label for=\"executor\" class=\"form-label\">Выберите испольнителя задания:</label>\n          <select *ngIf=\"usersOfProject$ | async as users\" formControlName=\"executor\" id=\"executor\">\n            <option value=\"{{user.userId}}\" *ngFor=\"let user of users\">{{user.fio}}</option>\n          </select>\n          <div\n            class=\"validation\"\n            *ngIf=\"formAddTask.get('executor').touched && formAddTask.get('executor').invalid\"\n          >\n            <small\n              *ngIf=\"formAddTask.get('executor').errors.required\"\n            >\n              Поле не может быть пустым\n            </small>\n          </div>\n        </div>\n\n      <div\n        class=\"form-control\"\n        [ngClass]=\"{invalid: formAddTask.get('priority').touched && formAddTask.get('priority').invalid}\"\n      >\n        <label for=\"priority\" class=\"form-label\">Выберите приоритет задания:</label>\n        <select formControlName=\"priority\" id=\"priority\">\n          <option value=\"1\">Важно</option>\n          <option value=\"2\">Неважно</option>\n        </select>\n        <div\n          class=\"validation\"\n          *ngIf=\"formAddTask.get('priority').touched && formAddTask.get('priority').invalid\"\n        >\n          <small\n            *ngIf=\"formAddTask.get('priority').errors.required\"\n          >\n            Поле не может быть пустым\n          </small>\n        </div>\n      </div>\n\n      <div class=\"form-button-wrap\">\n        <button\n          type=\"submit\"\n          class=\"form-button\"\n          [ngClass]=\"{invalid: formAddTask.invalid || submitted}\"\n          [disabled]=\"formAddTask.invalid || submitted\"\n        >Создать\n        </button>\n      </div>\n    </form>\n\n    <ng-template #taskcreated>\n      <div class=\"created\">\n        <img src=\"assets/img/icons/success.svg\" alt=\"\">\n        <p>Задание успешно создано!</p>\n        <a [routerLink]=\"['/user', 'projects', route.snapshot.params['id']]\">Назад к проекту</a>\n      </div>\n    </ng-template>\n  </div>\n</div>\n","import {Inject, Injectable} from '@angular/core';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {Observable} from 'rxjs';\r\nimport {AddTask, minProject, NewProject, Project, Task, UsersOfProject, UserToProject} from '../interfaces/interfaces';\r\nimport {RESOURCE_API_URL} from '../../app-injection-tokens';\r\nimport {map, tap} from 'rxjs/operators';\r\n\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class ProjectService {\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    @Inject(RESOURCE_API_URL) private apiUrl: string) {\r\n  }\r\n\r\n  getProjects(): Observable<minProject[]> {\r\n    return this.http.get<minProject[]>(`${this.apiUrl}api/projects`)\r\n  }\r\n\r\n  createProject(project: NewProject): Observable<NewProject> {\r\n    return this.http.post<NewProject>(`${this.apiUrl}api/projects/create`, project)\r\n  }\r\n\r\n  getProjectById(id: string): Observable<Project[]> {\r\n    return this.http.get<Project[]>(`${this.apiUrl}api/projects/project`, {\r\n      params: new HttpParams().set('id', id)\r\n    })\r\n  }\r\n\r\n  addUser(userToProject: UserToProject): Observable<UserToProject> {\r\n    return this.http.post<UserToProject>(`${this.apiUrl}api/projects/adduser`, userToProject)\r\n  }\r\n\r\n  getUsersOfProject(id: string): Observable<UsersOfProject[]> {\r\n    return this.http.get<UsersOfProject[]>(`${this.apiUrl}api/projects/getusers`, {\r\n      params: new HttpParams().set('id', id)\r\n    })\r\n  }\r\n\r\n  addTask(task: AddTask): Observable<AddTask> {\r\n    return this.http.post<AddTask>(`${this.apiUrl}api/tasks/create`, task)\r\n  }\r\n\r\n  getTasks(id: string): Observable<Task[]> {\r\n    return this.http.get<Task[]>(`${this.apiUrl}api/tasks/project`, {\r\n      params: new HttpParams().set('id', id)\r\n    })\r\n  }\r\n}\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}